{"version":3,"sources":["components/CoachSelector.tsx","components/SlotSelector.tsx","api.ts","components/App.tsx","index.tsx"],"names":["CoachSelector","state","onCoachClick","coach","setState","selectedCoach","props","onCoachSelect","renderCoachButton","className","key","onClick","this","availableCoaches","map","React","Component","INCREMENTS","SlotSelector","onPeriodClick","slots","onSlotSelect","days","time","Moment","startOf","i","push","clone","add","toISOString","format","day","last_slot_i","last_slot","endOfDay","endOf","periodElements","isBefore","start","slotsForThisPeriod","isSame","length","renderPeriod","renderDay","getSlots","a","fetch","ENDPOINT","data","json","saveAppointment","slot","console","log","method","body","JSON","stringify","App","getCoaches","coachSet","reduce","coaches","Set","Array","from","filter","includes","Api","then","selectedSlot","formattedStart","renderLoading","renderUI","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bf1bcb4.chunk.js","sourcesContent":["import React from 'react';\nimport './CoachSelector.css';\n\ntype Props = {\n  availableCoaches: any[],\n  onCoachSelect: (coach: string) => void\n}\ntype State = {\n  selectedCoach?: string\n}\n\nclass CoachSelector extends React.Component<Props, State> {\n  readonly state: State = {}\n  onCoachClick = (coach: string) => {\n    this.setState({ selectedCoach: coach })\n    this.props.onCoachSelect(coach);\n  }\n  renderCoachButton = (coach: string) => {\n    const className = (this.state.selectedCoach === coach) ? 'selected' : '';\n    return <div key={coach}>\n      <button onClick={() => this.onCoachClick(coach)} className={className}>\n        {coach}\n      </button>\n    </div>;\n  }\n\n  render() {\n    return (\n      <div className='coachSelector'>\n        <h2>Filter by coach</h2>\n        <div className='coachList'>\n          { this.props.availableCoaches.map((coach) => this.renderCoachButton(coach))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CoachSelector;\n","import React from 'react';\nimport Moment from 'moment';\nimport { Slot } from '../api'\nimport './SlotSelector.css';\n\ntype Props = {\n  slots: Slot[],\n  onSlotSelect: (slots: Slot) => void\n}\nconst DAYS_TO_DISPLAY = 7;\n\n// The length of each appointment.  This should match the length of the slots\n// passed in via the slots parameter.\nconst INCREMENTS = [30, 'minutes'];\n\nclass SlotSelector extends React.Component<Props, {}> {\n  days() {\n    const days = [];\n    let time = Moment().startOf('day');\n    for(let i = 0; i < DAYS_TO_DISPLAY; i++) {\n      days.push(time.clone());\n      time.add(1, 'days');\n    }\n    return days;\n  }\n\n  // If there are multiple coaches available for this period, that means the\n  // user didn't select a coach already.  We assume this means they don't care\n  // which coach they get, so just give them the first available one.\n  onPeriodClick = (slots: Slot[]) => () => this.props.onSlotSelect(slots[0]);\n\n  // Renders a clickable time, eg [12:30pm]\n  renderPeriod(time: Moment.Moment, slots: Slot[]) {\n    return <button key={time.toISOString()} onClick={this.onPeriodClick(slots)}>\n      { time.format('h:mm a') }\n    </button>;\n  }\n\n  renderDay(day: Moment.Moment) {\n    const { slots } = this.props\n    let time = day.clone().startOf('day');\n    let last_slot_i = 0;\n    let last_slot = slots[last_slot_i];\n    const endOfDay = day.clone().endOf('day');\n    const periodElements = [];\n    while (time.isBefore(endOfDay)) {\n      // Look for the first slot that starts on this period\n      while(last_slot != null && Moment(last_slot.start).isBefore(time)) {\n        last_slot_i++;\n        last_slot = slots[last_slot_i];\n      }\n\n      // Grab all slots in this period\n      let slotsForThisPeriod = []\n      while(last_slot != null && Moment(last_slot.start).isSame(time)) {\n        slotsForThisPeriod.push(last_slot)\n        last_slot_i++;\n        last_slot = slots[last_slot_i];\n      }\n      if (slotsForThisPeriod.length > 0) {\n        periodElements.push(this.renderPeriod(time.clone(), slotsForThisPeriod));\n      }\n      time.add(...INCREMENTS);\n    }\n    return <div className='day' key={day.toISOString()}>\n      <h3>{ day.format('dddd') }</h3>\n      { periodElements }\n    </div>;\n  }\n  render() {\n    return (\n      <div className='slotSelector'>\n        { this.days().map((day, i) => this.renderDay(day)) }\n      </div>\n    );\n  }\n}\n\nexport default SlotSelector;\n","const ENDPOINT = 'http://localhost:4567'\n\nexport interface Slot {\n  start: string\n  coach: string\n}\n\nexport default {\n  getSlots: async (): Promise<Slot[]> => {\n    const data = await fetch(ENDPOINT + '/slots')\n    return data.json();\n  },\n  saveAppointment: async (slot: Slot) => {\n    console.log('saving')\n    await fetch(ENDPOINT + '/appointments', {\n      method: 'POST',\n      body: JSON.stringify(slot)\n    })\n  }\n}\n","import React from 'react';\nimport Moment from 'moment';\nimport CoachSelector from './CoachSelector';\nimport SlotSelector from './SlotSelector';\nimport Api, { Slot } from '../api'\nimport './App.css';\n\ninterface State {\n  slots?: Slot[]\n  selectedCoach?: string\n  selectedSlot?: Slot\n}\nclass App extends React.Component<{}, State> {\n  readonly state: State = {}\n  onCoachSelect = (coach: string) => {\n    console.log(\"Selected coach:\", coach)\n    this.setState({ selectedCoach: coach });\n  }\n  componentDidMount() {\n    Api.getSlots().then((slots) => {\n      this.setState({ slots: slots });\n    });\n  }\n  getCoaches = () => {\n    const { slots } = this.state\n\n    if (slots == null) { return [] }\n    const coachSet = slots.reduce(\n      (coaches, slot: Slot) => coaches.add(slot.coach),\n      new Set()\n    )\n    return Array.from(coachSet);\n  }\n  getSlots = () => {\n    const slots = this.state.slots;\n    if (slots == null) { return [] }\n\n    const { selectedCoach } = this.state;\n\n    // If no coach is selected, show all slots\n    if(selectedCoach == null) { return slots }\n\n    return slots.filter((slot) => selectedCoach.includes(slot.coach));\n  }\n  onSlotSelect = (slot: Slot) => {\n    console.log('selected', slot)\n    // TODO: show a loading indicator here while we're saving so the user has\n    // some feedback to know their click worked.\n    Api.saveAppointment(slot).then(() => this.setState({selectedSlot: slot}))\n  }\n  renderLoading() {\n    return <div>Loading...</div>\n  }\n  renderUI() {\n    const { selectedSlot } = this.state\n    if (selectedSlot == null) {\n      return <>\n        <CoachSelector availableCoaches={this.getCoaches()} onCoachSelect={this.onCoachSelect} />\n        <SlotSelector slots={this.getSlots()} onSlotSelect={this.onSlotSelect} />\n      </>\n    } else {\n      const formattedStart = Moment(selectedSlot.start).format('h:mma [on] dddd [the] Mo');\n      return <div className='appointmentMade'>\n        <div className='appointmentConfirmation'>\n          <h1>Your appointment is all set!</h1>\n          <p>\n            You'll be talking to <b>{ selectedSlot.coach }</b><br /> at <b>{ formattedStart }</b>.\n          </p>\n        </div>\n      </div>\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.slots == null ? this.renderLoading() : this.renderUI() }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}